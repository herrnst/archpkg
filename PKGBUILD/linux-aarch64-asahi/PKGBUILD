# AArch64 Apple Silicon (Asahi Linux)
#
# Linux kernel image for Apple Silicon/Apple M1/aarch64 systems, built from
# Asahilinux sources rebased onto GregKH's Linux stable series.
#
# PKGBUILD based on ALARM linux-aarch64 and the AsahiLinux linux-asahi(-edge)
# PKGBUILD, the kernel configuration equals to the linux-asahi(-edge) config.
#
# Maintainer: Daniel Scheller <d.scheller@gmx.net>
#
# Original maintainers:
# Kevin Mihelich <kevin@archlinuxarm.org>
# Janne Grunau <j@jannau.net>
# The AsahiLinux team (github.com/AsahiLinux / asahilinux.org)

buildarch=8

pkgbase=linux-aarch64-asahi
pkgver=6.8.12
pkgrel=1

_srcdir="linux-asahi-${pkgver}-asahi"
_m1n1_version=1.3.2
_kernelname=${pkgbase#linux}
_desc="AArch64 Apple Silicon (M1 development kernel)"
arch=('aarch64')
url="http://www.kernel.org/"
license=('GPL2')

makedepends=(
  bc dtc kmod libelf pahole cpio perl rust rust-src rust-bindgen tar xz xmlto
)
options=('!strip')
source=(
  https://github.com/herrnst/linux-asahi/archive/refs/tags/v${pkgver}-asahi.tar.gz
  config         # merged olddefconfig+asahi+asahiedge config file
)
sha256sums=('00342b2dfcd3bab22149021e6f38646554f396cf7e34670b3c7173d35053b248'
            '2ea6e564ce22e37c335d6c2c57553fca0dacf3a1047396fb42f9e02803672171')
b2sums=('f33486d453b8fe37b3b0221a6d1afe073bdb6f700c8954b1e45e1cfc8547c6a37200c7db84e459f7dfba006a9546b26dfef31195bfb23c5d6b0e14e3e59d4a74'
        '040a64f70a297b929b77a637f2b79b1382ee2c6d961e211bad65f5fdf713cea45115dfa4c0a8376fd8054e7ffaa204cd2f0acc161438904d7b70043181cc8b86')

prepare() {
  cd $_srcdir

  echo "Checking Rust availability..."
  make rustavailable || exit 1

  echo "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  # The "asahi" version tag is already set through 20-pkgname, so remove this
  # (shipped by the tarball/source repo)
  rm -f localversion.05-asahi

  cat "${srcdir}/config" > ./.config
}

build() {
  cd $_srcdir

  # get kernel version
  make prepare
  make -s kernelrelease > version

  # build!
  unset LDFLAGS
  make ${MAKEFLAGS} Image Image.gz modules
  # Generate device tree blobs with symbols to support applying device tree overlays in U-Boot
  make ${MAKEFLAGS} DTC_FLAGS="-@" dtbs
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(coreutils kmod initramfs "m1n1>=$_m1n1_version")
  optdepends=('wireless-regdb: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(WIREGUARD-MODULE linux=${pkgver} linux-asahi)
  replaces=('wireguard-arch' 'linux-aarch64-asahi-edge')
  conflicts=('linux')

  cd $_srcdir
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 arch/arm64/boot/Image "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

  echo "Installing device trees..."
  install -Dt "$modulesdir/dtbs" arch/arm64/boot/dts/apple/*.dtb

  # remove build and source links
  rm "$modulesdir"/{source,build} || true
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  KARCH=arm64

  cd $_srcdir
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  #install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  #install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  echo "Installing headers..."
  cp -t "$builddir" -a include

  install -Dt "${builddir}/arch/${KARCH}" -m644 arch/${KARCH}/Makefile
  install -Dt "${builddir}/arch/${KARCH}/kernel" -m644 arch/${KARCH}/kernel/asm-offsets.s
  cp -t "${builddir}/arch/${KARCH}" -a arch/${KARCH}/include arch/${KARCH}/include

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */${KARCH}/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Removing cmd files..."
  find "$builddir" -type f -name '*.cmd' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
