From 5fd7eef099846bd2b0e1819b770bdd66e4e21f8d Mon Sep 17 00:00:00 2001
From: Vasyl Gello <vasek.gello@gmail.com>
Date: Fri, 9 Aug 2024 07:11:41 +0000
Subject: [PATCH] Port FFmpeg 7.0 to ffmpegdirect Omega

From https://github.com/xbmc/xbmc/pull/24972

Signed-off-by: Vasyl Gello <vasek.gello@gmail.com>
---
 FindFFMPEG.cmake                     |  16 ++--
 depends/common/ffmpeg/CMakeLists.txt |   4 +-
 depends/common/ffmpeg/ffmpeg.sha256  |   2 +-
 depends/common/ffmpeg/ffmpeg.txt     |   2 +-
 src/stream/FFmpegStream.cpp          | 125 ++++++++-------------------
 5 files changed, 46 insertions(+), 103 deletions(-)

diff --git a/FindFFMPEG.cmake b/FindFFMPEG.cmake
index d03f3292..8b205382 100644
--- a/FindFFMPEG.cmake
+++ b/FindFFMPEG.cmake
@@ -33,14 +33,14 @@
 #
 
 # required ffmpeg library versions
-set(REQUIRED_FFMPEG_VERSION 5.0.0)
-set(_avcodec_ver ">=59.18.100")
-set(_avfilter_ver ">=8.24.100")
-set(_avformat_ver ">=59.16.100")
-set(_avutil_ver ">=57.17.100")
-set(_postproc_ver ">=56.3.100")
-set(_swresample_ver ">=4.3.100")
-set(_swscale_ver ">=6.4.100")
+set(REQUIRED_FFMPEG_VERSION 7.0.0)
+set(_avcodec_ver ">=61.3.100")
+set(_avfilter_ver ">=10.1.100")
+set(_avformat_ver ">=61.1.100")
+set(_avutil_ver ">=59.8.100")
+set(_postproc_ver ">=58.1.100")
+set(_swresample_ver ">=5.1.100")
+set(_swscale_ver ">=8.1.100")
 
 # Allows building with external ffmpeg not found in system paths,
 # without library version checks
diff --git a/depends/common/ffmpeg/CMakeLists.txt b/depends/common/ffmpeg/CMakeLists.txt
index 66d757ce..1c80fddf 100644
--- a/depends/common/ffmpeg/CMakeLists.txt
+++ b/depends/common/ffmpeg/CMakeLists.txt
@@ -112,10 +112,10 @@ if(NOT WIN32)
       list(APPEND EXTRA_CONF --arch=aarch64)
       list(APPEND EXTRA_CONF --disable-filter=yadif_videotoolbox)
     endif()
-    list(APPEND EXTRA_CONF --disable-decoder=mpeg_xvmc --disable-crystalhd --enable-videotoolbox
+    list(APPEND EXTRA_CONF --disable-decoder=mpeg_xvmc --enable-videotoolbox
                            --target-os=darwin)
   elseif(CORE_SYSTEM_NAME STREQUAL osx)
-    list(APPEND EXTRA_CONF --disable-decoder=mpeg_xvmc --disable-crystalhd --enable-videotoolbox
+    list(APPEND EXTRA_CONF --disable-decoder=mpeg_xvmc --enable-videotoolbox
                            --target-os=darwin
                            --disable-securetransport)
   endif()
diff --git a/depends/common/ffmpeg/ffmpeg.sha256 b/depends/common/ffmpeg/ffmpeg.sha256
index fa8ee93a..3a589d7e 100644
--- a/depends/common/ffmpeg/ffmpeg.sha256
+++ b/depends/common/ffmpeg/ffmpeg.sha256
@@ -1 +1 @@
-9a1fa94608300e835bf89bdfcd7d77deceba67bff3494f609816f84bd69a459e
+8dab1da0c7ebccb2dce99265901f22ac40f8e0fbbe4a89a368d7645f2e79caa0
diff --git a/depends/common/ffmpeg/ffmpeg.txt b/depends/common/ffmpeg/ffmpeg.txt
index 2d01c290..258694f9 100644
--- a/depends/common/ffmpeg/ffmpeg.txt
+++ b/depends/common/ffmpeg/ffmpeg.txt
@@ -1 +1 @@
-ffmpeg https://github.com/FFmpeg/FFmpeg/archive/refs/tags/n6.0.tar.gz
+ffmpeg https://github.com/FFmpeg/FFmpeg/archive/refs/tags/n7.0.1.tar.gz
diff --git a/src/stream/FFmpegStream.cpp b/src/stream/FFmpegStream.cpp
index 8bf474f3..c77e09dd 100644
--- a/src/stream/FFmpegStream.cpp
+++ b/src/stream/FFmpegStream.cpp
@@ -1012,74 +1012,7 @@ bool FFmpegStream::OpenWithCURL(const AVInputFormat* iformat)
   if (iformat == nullptr)
   {
     // let ffmpeg decide which demuxer we have to open
-    bool trySPDIFonly = (m_curlInput->GetContent() == "audio/x-spdif-compressed");
-
-    if (!trySPDIFonly)
-      av_probe_input_buffer(m_ioContext, &iformat, strFile.c_str(), NULL, 0, 0);
-
-    // Use the more low-level code in case we have been built against an old
-    // FFmpeg without the above av_probe_input_buffer(), or in case we only
-    // want to probe for spdif (DTS or IEC 61937) compressed audio
-    // specifically, or in case the file is a wav which may contain DTS or
-    // IEC 61937 (e.g. ac3-in-wav) and we want to check for those formats.
-    if (trySPDIFonly || (iformat && strcmp(iformat->name, "wav") == 0))
-    {
-      AVProbeData pd;
-      int probeBufferSize = 32768;
-      std::unique_ptr<uint8_t[]> probe_buffer (new uint8_t[probeBufferSize + AVPROBE_PADDING_SIZE]);
-
-      // init probe data
-      pd.buf = probe_buffer.get();
-      pd.filename = strFile.c_str();
-
-      // read data using avformat's buffers
-      pd.buf_size = avio_read(m_ioContext, pd.buf, probeBufferSize);
-      if (pd.buf_size <= 0)
-      {
-        Log(LOGLEVEL_ERROR, "%s - error reading from input stream, %s", __FUNCTION__, CURL::GetRedacted(strFile).c_str());
-        return false;
-      }
-      memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
-
-      // restore position again
-      avio_seek(m_ioContext , 0, SEEK_SET);
-
-      // the advancedsetting is for allowing the user to force outputting the
-      // 44.1 kHz DTS wav file as PCM, so that an A/V receiver can decode
-      // it (this is temporary until we handle 44.1 kHz passthrough properly)
-      if (trySPDIFonly || (iformat && strcmp(iformat->name, "wav") == 0)) // && !CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_VideoPlayerIgnoreDTSinWAV))
-      {
-        // check for spdif and dts
-        // This is used with wav files and audio CDs that may contain
-        // a DTS or AC3 track padded for S/PDIF playback. If neither of those
-        // is present, we assume it is PCM audio.
-        // AC3 is always wrapped in iec61937 (ffmpeg "spdif"), while DTS
-        // may be just padded.
-        const AVInputFormat* iformat2 = av_find_input_format("spdif");
-
-        if (iformat2 && iformat2->read_probe(&pd) > AVPROBE_SCORE_MAX / 4)
-        {
-          iformat = iformat2;
-        }
-        else
-        {
-          // not spdif or no spdif demuxer, try dts
-          iformat2 = av_find_input_format("dts");
-
-          if (iformat2 && iformat2->read_probe(&pd) > AVPROBE_SCORE_MAX / 4)
-          {
-            iformat = iformat2;
-          }
-          else if (trySPDIFonly)
-          {
-            // not dts either, return false in case we were explicitly
-            // requested to only check for S/PDIF padded compressed audio
-            Log(LOGLEVEL_DEBUG, "%s - not spdif or dts file, falling back", __FUNCTION__);
-            return false;
-          }
-        }
-      }
-    }
+    av_probe_input_buffer(m_ioContext, &iformat, strFile.c_str(), NULL, 0, 0);
 
     if (!iformat)
     {
@@ -1535,7 +1468,7 @@ bool FFmpegStream::SeekTime(double time, bool backwards, double* startpts)
 
     if (ret >= 0)
     {
-      if (m_pFormatContext->iformat->read_seek)
+      if (!(m_pFormatContext->iformat->flags & AVFMT_NOTIMESTAMPS))
         m_seekToKeyFrame = true;
 
         m_currentPts = STREAM_NOPTS_VALUE;
@@ -2059,43 +1992,49 @@ DemuxStream* FFmpegStream::AddStream(int streamIdx)
         st->colorRange = pStream->codecpar->color_range;
         st->hdr_type = DetermineHdrType(pStream);
 
-        // https://github.com/FFmpeg/FFmpeg/blob/release/5.0/doc/APIchanges
-        size_t size = 0;
-        uint8_t* side_data = nullptr;
+        // https://github.com/FFmpeg/FFmpeg/blob/release/7.0/doc/APIchanges
+        const AVPacketSideData* sideData = nullptr;
 
         if (st->hdr_type == StreamHdrType::HDR_TYPE_DOLBYVISION)
         {
-          side_data = av_stream_get_side_data(pStream, AV_PKT_DATA_DOVI_CONF, &size);
-          if (side_data && size)
+
+          sideData =
+              av_packet_side_data_get(pStream->codecpar->coded_side_data,
+                                      pStream->codecpar->nb_coded_side_data, AV_PKT_DATA_DOVI_CONF);
+          if (sideData && sideData->size)
           {
-            st->dovi = *reinterpret_cast<AVDOVIDecoderConfigurationRecord*>(side_data);
+            st->dovi = *reinterpret_cast<const AVDOVIDecoderConfigurationRecord*>(sideData->data);
           }
         }
 
-        side_data = av_stream_get_side_data(pStream, AV_PKT_DATA_MASTERING_DISPLAY_METADATA, &size);
-        if (side_data && size)
+        sideData = av_packet_side_data_get(pStream->codecpar->coded_side_data,
+                                           pStream->codecpar->nb_coded_side_data,
+                                           AV_PKT_DATA_MASTERING_DISPLAY_METADATA);
+        if (sideData && sideData->size)
         {
           st->masteringMetaData = std::make_shared<AVMasteringDisplayMetadata>(
-              *reinterpret_cast<AVMasteringDisplayMetadata*>(side_data));
+              *reinterpret_cast<const AVMasteringDisplayMetadata*>(sideData->data));
         }
 
-        side_data = av_stream_get_side_data(pStream, AV_PKT_DATA_CONTENT_LIGHT_LEVEL, &size);
-        if (side_data && size)
+        sideData = av_packet_side_data_get(pStream->codecpar->coded_side_data,
+                                           pStream->codecpar->nb_coded_side_data,
+                                           AV_PKT_DATA_CONTENT_LIGHT_LEVEL);
+        if (sideData && sideData->size)
         {
           st->contentLightMetaData = std::make_shared<AVContentLightMetadata>(
-              *reinterpret_cast<AVContentLightMetadata*>(side_data));
+              *reinterpret_cast<const AVContentLightMetadata*>(sideData->data));
         }
 
-        AVDictionaryEntry* rtag = av_dict_get(pStream->metadata, "rotate", NULL, 0);
-        uint8_t* displayMatrixSideData =
-            av_stream_get_side_data(pStream, AV_PKT_DATA_DISPLAYMATRIX, nullptr);
-        if (displayMatrixSideData)
+        sideData = av_packet_side_data_get(pStream->codecpar->coded_side_data,
+                                           pStream->codecpar->nb_coded_side_data,
+                                           AV_PKT_DATA_DISPLAYMATRIX);
+        if (sideData)
         {
-          const double tetha =
-              av_display_rotation_get(reinterpret_cast<int32_t*>(displayMatrixSideData));
-          if (!std::isnan(tetha))
+          const double theta =
+              av_display_rotation_get(reinterpret_cast<const int32_t*>(sideData->data));
+          if (!std::isnan(theta))
           {
-            st->iOrientation = ((static_cast<int>(-tetha) % 360) + 360) % 360;
+            st->iOrientation = ((static_cast<int>(-theta) % 360) + 360) % 360;
           }
         }
 
@@ -2271,7 +2210,9 @@ StreamHdrType FFmpegStream::DetermineHdrType(AVStream* pStream)
 {
   StreamHdrType hdrType = StreamHdrType::HDR_TYPE_NONE;
 
-  if (av_stream_get_side_data(pStream, AV_PKT_DATA_DOVI_CONF, nullptr)) // DoVi
+  if (av_packet_side_data_get(pStream->codecpar->coded_side_data,
+                              pStream->codecpar->nb_coded_side_data,
+                              AV_PKT_DATA_DOVI_CONF)) // DoVi
     hdrType = StreamHdrType::HDR_TYPE_DOLBYVISION;
   else if (pStream->codecpar->color_trc == AVCOL_TRC_SMPTE2084) // HDR10
     hdrType = StreamHdrType::HDR_TYPE_HDR10;
@@ -2279,7 +2220,9 @@ StreamHdrType FFmpegStream::DetermineHdrType(AVStream* pStream)
     hdrType = StreamHdrType::HDR_TYPE_HLG;
   // file could be SMPTE2086 which FFmpeg currently returns as unknown
   // so use the presence of static metadata to detect it
-  else if (av_stream_get_side_data(pStream, AV_PKT_DATA_MASTERING_DISPLAY_METADATA, nullptr))
+  else if (av_packet_side_data_get(pStream->codecpar->coded_side_data,
+                                   pStream->codecpar->nb_coded_side_data,
+                                   AV_PKT_DATA_MASTERING_DISPLAY_METADATA))
     hdrType = StreamHdrType::HDR_TYPE_HDR10;
 
   return hdrType;
